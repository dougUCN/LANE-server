type Device {
  name: String!
  states: String
  currentState: String
  isOnline: Boolean
}

input DeviceInput {
  name: String!
  states: String
  currentState: String
  isOnline: Boolean
}

type DevicePayload {
  message: String!
  success: Boolean!
}

type DeviceStates {
  """
  `device`, `state`, `time` are equal length lists

  Indicates the time [seconds] at which a device is set to a state
  """
  device: [String]!
  state: [String]!
  time: [Float]!
}

input DeviceStatesInput {
  """
  `device`, `state`, `time` are equal length lists

  Indicates the time [seconds] at which a device is set to a state
  """
  device: [String]!
  state: [String]!
  time: [Float]!
}

type Run {
  """
  - `qOrder` designates the priority in which the runfile is run (larger = higher priority). Default = 0
  - `timeElapsed` [seconds] is only updated during a live run
  - `startTime` is in UTC
  - `runTime` is the total amount of time required for the run to complete
  """
  name: String!
  qOrder: Int
  startTime: Datetime
  status: RunStatus
  deviceStates: DeviceStates
  runTime: Float
  timeElapsed: Float
}

input RunInput {
  """
  - `qOrder` designates the priority in which the runfile is run (larger = higher priority). Default = 0
  - `timeElapsed` [seconds] is only updated during a live run
  - `startTime` is in UTC
  - `runTime` is the total amount of time required for the run to complete
  """
  name: String!
  qOrder: Int
  startTime: Datetime
  deviceStates: DeviceStatesInput
  status: RunStatus
  runTime: Float!
}

type RunPayload {
  message: String!
  success: Boolean!
}

enum RunStatus {
  QUEUED
  RUNNING
  COMPLETED
}
