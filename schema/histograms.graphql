type Histogram {
  """
  - `id`: unique integer identifier of a histogram
  - `name`: Run name
  - `data`: List of x y coordinates
  - `xrange`: Range of the x axis to plot
  - `yrange`: Range of the y axis to plot
  - `len`: Number of data points
  - `type`: Detector type
  - `created`: Datetime when histogram was made in the database
  """
  id: ID!
  name: String
  data: [Point!]
  xrange: Range!
  yrange: Range!
  len: Int
  type: String
  created: Datetime
}

type LiveHistogram {
  """
  - `id`: unique integer identifier of a histogram
  - `name`: Run name
  - `data`: List of x y coordinates
  - `xrange`: Range of the x axis to plot
  - `yrange`: Range of the y axis to plot
  - `len`: Number of data points
  - `current`: The last added `Point`
  - `type`: Detector type
  - `created`: Datetime when histogram was made in the database
  """
  id: ID!
  name: String
  data: [Point!]
  xrange: Range!
  yrange: Range!
  len: Int
  current: Point
  type: String
  created: Datetime
}

input HistogramInput {
  """
  - `id`: unique integer identifier of a histogram
  - `name`: Run name. Can be duplicate
  - `data`: List of x y coordinates
  - `xrange`: Range of the x axis to plot
  - `yrange`: Range of the y axis to plot
  - `type`: Detector type
  - `isLive`: Whether histogram gets put in the live database or the static one (default: static)
  """
  id: ID!
  name: String!
  data: [PointInput!]
  xrange: RangeInput!
  yrange: RangeInput!
  type: String!
  isLive: Boolean
}

input HistogramUpdateInput {
  """
  - `id`: unique integer identifier of the histogram to edit
  - `isLive`: Whether histogram to edit is in live database or the static one (default: static)
  - `data`: List of x y coordinates
  - `xrange`: Range of the x axis to plot
  - `yrange`: Range of the y axis to plot
  - `type`: Detector type
  """
  id: ID!
  data: [PointInput!]
  xrange: RangeInput
  yrange: RangeInput
  type: String
  isLive: Boolean
}

type Point {
  "coordinate in a format compatible with an SVG plotter"
  x: Float!
  y: Float!
}

input PointInput {
  "coordinate in a format compatible with an SVG plotter"
  x: Float!
  y: Float!
}

type Range {
  "Gives a minimum and maximum for a range of values"
  min: Float!
  max: Float!
}

input RangeInput {
  "A minimum and maximum for a range of values"
  min: Float!
  max: Float!
}

type HistogramPayload {
  """
  Return value of a mutation affecting histograms.
  """
  message: String!
  success: Boolean!
}

"Datetime is in UTC"
scalar Datetime
