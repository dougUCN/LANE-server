type Query {
  "Retrieves a histogram corresponding to `id` from the static or live database"
  getHistogram(id: ID!, isLive: Boolean): Histogram

  """
  Applies an optional set of filters (`ids`, `names`, `minDate`, `maxDate`, `types`)
  to retrieve histograms from either the live or static database
  (specified by `isLive`, which defaults to `false`)
  """
  getHistograms(
    ids: [ID]
    names: [String]
    minDate: Datetime
    maxDate: Datetime
    types: [String]
    isLive: Boolean
  ): [Histogram]

  """
  Returns a page of table entries for the EMS main page, where
  each entry contains a run name and additional metadata for
  a group of histograms

  Entries are sorted by creation date in descending order

  Cursor pagination arguments:
  - `first`: Number of entries to retrieve (default 100)
  - `after`: An opaque string cursor

  If `after` is not specified, returns the first page
  """
  getHistTableEntries(first: Int!, after: String): HistTablePage

  """
  Gets the information of a run config in the database
  """
  getRunConfig(id: ID!): RunConfig

  """
  Retrieves all run configs in the database
  """
  getRunConfigs: getRunConfigsPayload

  """
  Gets information on a device
  """
  getDevice(name: String!): Device

  """
  Retrieves the configuration information of all devices in the db

  `isOnline` and `names` act as a filter if specified.
  """
  getDevices(names: [String], isOnline: Boolean): [Device]
}

type Mutation {
  """
  Creates a histogram in the database

  IF `isLive`, alters the Live database. Default = False
  """
  createHistogram(hist: HistogramInput!): HistogramPayload!

  """
  Updates an existing histogram with using type `HistogramInput`

  `nbins` is calculated automatically from `data` if unspecified.

  `type` is only updated if specified.

  IF `isLive`, alters the Live database. Default = False
  """
  updateHistogram(hist: HistogramUpdateInput!): HistogramPayload!

  """
  Deletes a histogram in the database

  IF `isLive`, alters the Live database. Default = False
  """
  deleteHistogram(id: ID!, isLive: Boolean): HistogramPayload!

  """
  Adds a run config into the db
  """
  createRunConfig(runConfig: RunConfigInput!): RunConfigPayload!

  """
  Updates the properties of a run in the db
  """
  updateRunConfig(runConfig: RunConfigUpdateInput!): RunConfigPayload!

  """
  Deletes a run in the db
  """
  deleteRunConfig(id: ID!): RunConfigPayload!

  """
  Sets the status of a RunConfig to `Queued`

  If existing runs are queued, updates the priority to be lower than
  what is already in the queue
  """
  loadRunConfig(id: ID!): SlowControlPayload!

  """
  Instructs the slow control worker to
  remove all non-live runs from the slow-control queue
  """
  clearRuns: SlowControlPayload!

  """
  Instructs the slow control worker to halt the run immediately.

  If `stopAfterThisRun` = true then the slow control will
  avoid a hard stop and wait til any current runs finish
  """
  stopRuns(stopAfterThisRun: Boolean): SlowControlPayload!

  """
  Instructs the slow control worker to recheck which devices are connected and online
  """
  refreshDevices: SlowControlPayload!

  """
  Creates a device in the database
  """
  createDevice(device: DeviceInput!): DevicePayload!

  """
  Updates the properties of a device in the database
  """
  updateDevice(device: DeviceInput!): DevicePayload!

  """
  Deletes a device
  """
  deleteDevice(name: String!): DevicePayload!
}

type Subscription {
  """
  Retrieves a list of live histograms + the last completed
  run name
  """
  getLiveHistograms: HistogramSubscriptionPayload
}
