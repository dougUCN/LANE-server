type Query {
  "Retrieves a histogram corresponding to `id`"
  getHistogram(id: ID!): Histogram

  """
  Applies optional filters to retrieve a list of histograms.

  Not specifying any filters throws an error message
  """
  getHistograms(
    ids: [ID]
    names: [String]
    minDate: Datetime
    maxDate: Datetime
    types: [String]
    isLive: Boolean
  ): [Histogram]

  "Lists all IDs of histograms in the database"
  listHistograms(isLive: Boolean): [ID]

  """
  Gets the information of a run in the database
  """
  getRun(id: ID!): Run

  """
  Applies optional filters to retrieve a list of runs

  Not specifying any filters returns all runs queued
  """
  getRuns(
    names: [String]
    minStartDate: Datetime
    maxStartDate: Datetime
    minSubDate: Datetime
    maxSubDate: Datetime
    status: RunStatus
  ): [Run]

  "Gets information on a device"
  getDevice(name: String!): Device

  """
  Applies optional filters to retrieve a list of devices

  Not specifying any filters returns all devices
  """
  getDevices(names: [String], isOnline: Boolean): [Device]
}

type Mutation {
  """
  Creates a histogram in the database

  IF `isLive`, alters the Live database. Default = False
  """
  createHistogram(hist: HistogramInput!): HistogramPayload!

  """
  Updates an existing histogram with using type `HistogramInput`

  `nbins` is calculated automatically from `data` if unspecified.

  `type` is only updated if specified.

  IF `isLive`, alters the Live database. Default = False
  """
  updateHistogram(hist: HistogramInput!): HistogramPayload!

  """
  Deletes a histogram in the database

  IF `isLive`, alters the Live database. Default = False
  """
  deleteHistogram(id: ID!, isLive: Boolean): HistogramPayload!

  """
  Adds a run into the queue
  """
  createRun(run: RunInput!): RunPayload!

  """
  Updates the properties of a run
  """
  updateRun(id: ID!, run: RunUpdateInput!): RunPayload!

  """
  Deletes a run
  """
  deleteRun(id: ID!): RunPayload!

  """
  Removes all non-live runs from the queue
  """
  clearRuns: RunPayload!

  """
  Instructs the slow control to start processing runs in the queue
  """
  startRuns: RunPayload!

  """
  Instructs the slow control to halt the run immediately.

  If `stopAfterThisRun` = true then the slow control will
  avoid a hard stop and wait til any current runs finish
  """
  stopRuns(stopAfterThisRun: Boolean): RunPayload!

  """
  Instructs the slow control to recheck which devices are connected and online
  """
  refreshDevices: DevicePayload!

  """
  Creates a slow control device in the database
  """
  createDevice(device: DeviceInput!): DevicePayload!

  """
  Updates the properties of a slow control device in the database
  """
  updateDevice(device: DeviceInput!): DevicePayload!

  """
  Deletes a device
  """
  deleteDevice(name: String!): DevicePayload!

  "Confirms validity of a token"
  verifyToken(token: String!): VerifyToken

  "Obtain a brand new token with renewed expiration time for non-expired tokens"
  refreshToken(token: String!): RefreshToken

  "Authenticates the user and obtains a JSON Web Token"
  tokenAuth(username: String!, password: String!): TokenAuth
}

type Subscription {
  """
  Retrieves a list of live histograms.

  Returns null every second when no data to publish
  """
  getLiveHistograms: [LiveHistogram]

  """
  Retrieves the current run. The only live updating field is
  `currentTime`

  Returns null every second when no data to publish
  """
  getLiveRun: Run
}
